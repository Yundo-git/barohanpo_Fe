인증 시스템 리팩토링 요약

1. 인증 아키텍처 변경
- 기존: 클라이언트 측에서 refreshToken을 localStorage에 저장
- 변경: 서버 측 HTTP-only 쿠키를 사용한 refreshToken 관리
- 이점: XSS 공격에 대한 보안 강화

2. 상태 관리 개선
- accessToken은 Redux 메모리 상태로만 관리
- refreshToken은 서버 쿠키로 관리 (클라이언트에서 접근 불가)
- 사용자 정보는 Redux-persist로 유지되나, 민감한 토큰 정보는 제외

3. 주요 컴포넌트별 변경사항

3.1 userSlice.tsx
- 불필요한 axios 헤더 관리 코드 제거
- refreshToken 관련 로직 제거
- 타입 안정성 개선 (TypeScript)
- 상태 업데이트 로직 단순화

3.2 useAuth.ts
- axios 인터셉터를 통한 자동 토큰 갱신 로직 구현
- 401 에러 처리 및 자동 로그아웃 구현
- 토큰 갱신 실패 시 로그인 페이지로 리다이렉트
- 중복 인터셉터 등록 방지

3.3 store.tsx
- redux-persist 설정 개선
- accessToken은 저장하지 않도록 transform 설정
- 타입 안전성 개선

4. 보안 개선사항
- refreshToken이 HTTP-only 쿠키로만 관리되어 XSS 방지
- accessToken은 메모리에서만 관리되어 탈취 위험 감소
- 모든 API 요청에 withCredentials: true 설정

5. 주요 변경 포인트
- 토큰 갱신 로직 중앙화 (useAuth 훅)
- 상태 관리와 인증 로직 분리
- 타입 안정성 강화
- 에러 처리 및 복구 로직 개선

6. 테스트 필요사항
- 로그인/로그아웃 플로우
- 토큰 만료 시 자동 갱신
- 페이지 새로고침 후 인증 상태 복원
- 동시 다중 요청 시 토큰 갱신 처리

7. 주의사항
- 서버 측에서는 refreshToken을 HTTP-only 쿠키로 설정해야 함
- CORS 설정 시 credentials 옵션 필요
- 개발 환경에서는 secure 플래그 주의
